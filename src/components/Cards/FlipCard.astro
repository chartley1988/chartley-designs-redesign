---
interface Props {
	flipDirection?: "horizontal" | "vertical";
	cardSize?: { width: string; height: string }; // Must be in the format '48px'
	pattern?: boolean;
	hoverFlip?: boolean;
}

const {
	cardSize = { width: "250px", height: "350px" },
	pattern = false,
	hoverFlip = false,
} = Astro.props;

const id = Math.random().toString(36).slice(2, 11);
let vertical = false;
if (Astro.props.flipDirection === "vertical") {
	vertical = true;
}
---

<div class='wrapper'>
	<div
		class='container'
		id={id}
	>
		{/* Card Back */}
		<div
			class:list={[
				"back flipped dark-theme",
				{ vertical },
				{ pattern },
				{ hoverFlip },
			]}
		>
			<slot name='back' />
		</div>

		{/* Card Front */}
		<div class:list={["front", { vertical }, { hoverFlip }]}>
			<slot name='front' />
		</div>
	</div>
</div>

<script define:vars={{ id, hoverFlip }}>
	let flipped = false;
	let flipEnabled = true;

	const card = document.getElementById(`${id}`);
	const back = card.children[0];
	const front = card.children[1];

	// if (hoverFlip === false) {
	// 	[back, front].forEach((side) => {
	// 		side.addEventListener("click", handleClick);
	// 	});
	// } else {
	// 	card.addEventListener("mouseover", handleMouseOver);
	// }

	[back, front].forEach((side) => {
		side.addEventListener("click", handleClick);
	});

	function handleClick(event) {
		event.stopPropagation();
		if (flipped) {
			flipped = false;
			back.classList.add("flipped");
			front.classList.remove("flipped");
		} else {
			flipped = true;
			back.classList.remove("flipped");
			front.classList.add("flipped");
		}
	}

	// function handleMouseOver(event) {
	// 	if (flipEnabled) {
	// 		event.stopPropagation();
	// 		flipEnabled = false;
	// 		[back, front].forEach((side) => {
	// 			side.addEventListener("transitionend", handleTransition);
	// 		});

	// 		if (flipped) {
	// 			flipped = false;
	// 			back.classList.add("flipped");
	// 			front.classList.remove("flipped");
	// 		} else {
	// 			flipped = true;
	// 			back.classList.remove("flipped");
	// 			front.classList.add("flipped");
	// 		}
	// 		function handleTransition() {
	// 			card.addEventListener("mouseleave", handleMouseLeave);
	// 			card.removeEventListener("mouseover", handleMouseOver);
	// 			[back, front].forEach((side) => {
	// 				side.removeEventListener("transitionend", handleTransition);
	// 			});
	// 			flipEnabled = true;
	// 		}
	// 	}
	// }

	// function handleMouseLeave(event) {
	// 	if (flipEnabled) {
	// 		event.stopPropagation();
	// 		flipEnabled = false;
	// 		[back, front].forEach((side) => {
	// 			side.addEventListener("transitionend", handleTransition);
	// 		});

	// 		if (flipped) {
	// 			flipped = false;
	// 			back.classList.add("flipped");
	// 			front.classList.remove("flipped");
	// 		} else {
	// 			flipped = true;
	// 			back.classList.remove("flipped");
	// 			front.classList.add("flipped");
	// 		}
	// 		function handleTransition() {
	// 			card.removeEventListener("mouseleave", handleMouseLeave);
	// 			card.addEventListener("mouseover", handleMouseOver);
	// 			[back, front].forEach((side) => {
	// 				side.removeEventListener("transitionend", handleTransition);
	// 			});
	// 			flipEnabled = true;
	// 		}
	// 	}
	// }
</script>

<style define:vars={{ width: cardSize.width, height: cardSize.height }}>
	.wrapper {
		width: var(--width);
		height: var(--height);
	}

	.container {
		position: relative;
		width: 100%;
		height: 100%;
	}

	.front,
	.back {
		--border-width: 6px;
		--border-color: var(--ui-border);
		--card-padding: 0.75rem;
		position: absolute;
		box-sizing: border-box;
		width: 100%;
		height: 100%;
		padding: calc(var(--border-width) + var(--card-padding));
		-webkit-backface-visibility: hidden;
		backface-visibility: hidden;
		transition: transform 0.8s ease;

		background-color: var(--ui-element-bg);
		border-radius: var(--radius-lg);
		box-shadow: var(--shadow-md);
		border: var(--border-width) solid var(--border-color);

		overflow: hidden;
	}

	.front {
		transform: perspective(1000px) rotateY(0deg);
	}

	.front.flipped {
		transform: perspective(1000px) rotateY(-180deg);
	}

	.back {
		transform: perspective(1000px) rotateY(0deg);
	}

	.back.flipped {
		transform: perspective(1000px) rotateY(180deg);
	}

	.front.vertical {
		transform: perspective(1000px) rotateX(0deg);
	}

	.front.flipped.vertical {
		transform: perspective(1000px) rotateX(-180deg);
	}

	.back.vertical {
		transform: perspective(1000px) rotateX(0deg);
	}

	.back.flipped.vertical {
		transform: perspective(1000px) rotateX(180deg);
	}




    /* Hover Logic */
    .container > .front.hoverFlip {
		transform: perspective(1000px) rotateY(0deg);
	}

	.container:hover > .front.hoverFlip {
		transform: perspective(1000px) rotateY(-180deg);
	}

	.container:hover > .back.hoverFlip {
		transform: perspective(1000px) rotateY(0deg);
	}

	.container > .back.hoverFlip {
		transform: perspective(1000px) rotateY(180deg);
	}

    .container > .front.hoverFlip.vertical {
		transform: perspective(1000px) rotateX(0deg);
	}

	.container:hover > .front.hoverFlip.vertical {
		transform: perspective(1000px) rotateX(-180deg);
	}

	.container:hover > .back.hoverFlip.vertical {
		transform: perspective(1000px) rotateX(0deg);
	}

	.container > .back.hoverFlip.vertical {
		transform: perspective(1000px) rotateX(180deg);
	}


  

	.pattern {
		background-color: #2c2a30;
		background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='80' height='80' viewBox='0 0 80 80'%3E%3Cg fill='%235a5463' fill-opacity='0.4'%3E%3Cpath fill-rule='evenodd' d='M11 0l5 20H6l5-20zm42 31a3 3 0 1 0 0-6 3 3 0 0 0 0 6zM0 72h40v4H0v-4zm0-8h31v4H0v-4zm20-16h20v4H20v-4zM0 56h40v4H0v-4zm63-25a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm10 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zM53 41a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm10 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm10 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-30 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-28-8a5 5 0 0 0-10 0h10zm10 0a5 5 0 0 1-10 0h10zM56 5a5 5 0 0 0-10 0h10zm10 0a5 5 0 0 1-10 0h10zm-3 46a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm10 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zM21 0l5 20H16l5-20zm43 64v-4h-4v4h-4v4h4v4h4v-4h4v-4h-4zM36 13h4v4h-4v-4zm4 4h4v4h-4v-4zm-4 4h4v4h-4v-4zm8-8h4v4h-4v-4z'/%3E%3C/g%3E%3C/svg%3E");
	}
</style>
