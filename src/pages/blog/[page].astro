---
import { getCollection, getEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { Image } from "astro:assets";
import summary from "../../data/summary";
import type { arrayOutputType } from "astro/zod";

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
	const quantityDisplayed = 6;

	const allPosts = await getCollection("blog");
	allPosts.sort(function (a, b) {
		return b.data.date.valueOf() - a.data.date.valueOf();
	});

	let pages = Math.floor(allPosts.length / quantityDisplayed);
	if (pages >= 1) pages = 1;

	type pageArrayType = (typeof allPosts)[];

	const pageArray: pageArrayType = [];

	for (let i = 0; i < allPosts.length; i += quantityDisplayed) {
		const chunk = allPosts.slice(i, i + quantityDisplayed);
		pageArray.push(chunk);
	}

	return pageArray.map((page) => ({
		params: { page: `page-${pageArray.indexOf(page) + 1}` },
		props: {
			page,
			pageNumber: pageArray.indexOf(page) + 1,
			lastPage: pageArray.length,
		},
	}));
}
const { page, pageNumber, lastPage } = Astro.props;
---

<Layout title={`${summary.siteName} - Blog: `}>
	<div class='container'>
		<!-- Navigation Buttons -->
		<div class='navigation'>
			{
				pageNumber !== 1 ? (
					<a href={`/blog/page-${String(Number(pageNumber) - 1)}`}>
						Previous Page
					</a>
				) : (
					<div />
				)
			}
			{
				pageNumber !== lastPage ? (
					<a href={`/blog/page-${String(Number(pageNumber) + 1)}`}>
						Next Page
					</a>
				) : (
					<div />
				)
			}
		</div>

		<!-- List of Blog Posts -->
		<ul>
			{
				page.map((post) => {
					return (
						<li>
							{post.data.thumbnail && (
								<Image
									src={post.data.thumbnail?.image}
									alt={post.data.thumbnail?.alt}
									class='thumbnail'
									width={400}
									height={400}
								/>
							)}
							<div class='post-content'>
								<a href={`/blog/${post.data.url}`}>
									{post.data.title}
								</a>
								<p>
									{post.data.date.toISOString().slice(0, 10)}
								</p>
							</div>
						</li>
					);
				})
			}
		</ul>

		<!-- Navigation Buttons -->
		<div class='navigation'>
			{
				pageNumber !== 1 ? (
					<a href={`/blog/page-${String(Number(pageNumber) - 1)}`}>
						Previous Page
					</a>
				) : (
					<div />
				)
			}
			{
				pageNumber !== lastPage ? (
					<a href={`/blog/page-${String(Number(pageNumber) + 1)}`}>
						Next Page
					</a>
				) : (
					<div />
				)
			}
		</div>
	</div>
</Layout>

<style>
	ul {
		display: grid;
		justify-content: center;
		grid-template-columns: 250px;
		gap: 2rem;
		padding: 0;
	}

	li {
		list-style: none;
		display: flex;
		flex-direction: column;
		justify-content: start;

		background-color: var(--ui-element-bg);
		border-radius: var(--radius-sm);
		box-shadow: var(--shadow-md);
		overflow: hidden;
	}

	.post-content {
		display: flex;
		min-height: 250px;
		flex-direction: column;
		justify-content: space-between;
		flex: 1;
		gap: 1.5rem;
		padding: 1.5rem 1.5rem 0.5rem 1.5rem;
	}

	.post-content > :last-child {
		font-size: 14px;
		display: flex;
		justify-content: end;
	}

	h2 {
		margin: 0;
		color: var(--ui-text-high-contrast);
		font-size: 1.2rem;
		line-height: 1.3rem;
	}

	a {
		text-decoration: none;
		flex: 1;
		color: var(--ui-text-high-contrast);
		font-weight: 700;
	}

	a:hover {
		color: var(--primary);
	}

	.thumbnail {
		object-fit: cover;
		width: minmax(250px, 100%);
		height: auto;
		aspect-ratio: 1/1;
	}

	.navigation {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		padding: 2rem;
	}

	.navigation > a {
		flex: none;
	}

	@media only screen and (min-width: 640px) {
		ul {
		grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
	}	
	}
</style>
